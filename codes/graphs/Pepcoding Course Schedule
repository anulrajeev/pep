Pepcoding Course Schedule

Medium  Prev   Next

Pepcoding offers total of n courses labelled from 0 to n-1.

Some courses may have prerequisites. you have been given m pairs ai,bi. where 1 pair means you must take the course bi before the course ai.

Given the total number of courses numCourses and a list of the prerequisite pairs, return the ordering of courses you should take to finish all courses. If it is impossible to finish all courses print -1.

Input Format
first line contains 2 numbers n,m wher n represents number of course and m is number of pairs representing prerequisite. Then m lines follow, each line has 2 space separated integers ai , bi.

Output Format
Print the ordering of courses you should take to finish all courses.Print the ordering of courses you should take to finish all courses.

Constraints
1 <= numCourses <= 2000
0 <= ai, bi < numCourses
ai != bi
All the pairs ai,bi are distinct.
Sample Input
4 4
1 0
2 0
3 1
3 2
Sample Output
0 1 2 3 



#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef unsigned long long ull;
typedef vector<int> vi;
typedef vector<vi> vvi;
typedef vector<ll> vll;
typedef vector<vll> vvll;
typedef vector<bool> vb;
typedef vector<vb> vvb;
typedef vector<string> vs;
typedef vector<char> vc;
typedef vector<vc> vvc;
typedef pair<int, int> pii;

ll mod = 1000000009;

void _main();
int main(){
 #ifndef ONLINE_JUDGE
    // for getting input from input.txt
    freopen("input.txt", "r", stdin);
    // for writing output to output.txt
    freopen("output.txt", "w", stdout);
 #endif
	_main();
	return 0;
}

void khansAlgo(vi adj[], int V)
{
	queue<int> q;
	int indegree[V]={0};
	vi res;
	for(int u=0;u<V;u++)
		for(int v : adj[u])
			indegree[v]++;
	for(int i=0;i<V;i++)
		if(indegree[i]==0)
			q.push(i);
	while(q.size())
	{
		int u=q.front(); q.pop();
		res.push_back(u);
		for(int v : adj[u])
			if(--indegree[v]==0)
				q.push(v);
	}
	if(res.size()==V)
		for(auto x : res)
			cout<<x<<' ';
	else
		cout<<-1;
}

void _main()
{
  	int V,E,u,v;
  	cin>>V>>E;	
  	vi adj[V];
  	for(int i=0;i<E;i++)
  	{
  		cin>>u>>v;
  		adj[v].push_back(u);
  	}
  	khansAlgo(adj,V);
}

