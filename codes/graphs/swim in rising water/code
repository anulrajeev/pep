


https://leetcode.com/problems/swim-in-rising-water/








typedef pair<int,int> pii;
class Solution {
    bool isValid(int i, int j, int n)
    {
        return (i>=0 && j>=0 && i<n && j<n);
    }
public:
    int swimInWater(vector<vector<int>>& grid) {
        
        int dx[]={-1,1,0,0};
        int dy[]={0,0,-1,1};
        int n=grid.size();
        set<pair<int,pii>> s;
        vector<vector<bool>>visited(n,vector<bool>(n,false));
        s.insert({grid[0][0],{0,0} });
        while(s.size())
        {
            int tsf = (*(s.begin())).first;
            int x = (*(s.begin())).second.first, y=(*(s.begin())).second.second;
            s.erase(s.begin());
            // cout<<x<<' '<<y<<'\t';
            if(x==n-1 && y==n-1)
                return tsf;
            
            if(visited[x][y])
                continue;
            
            visited[x][y]=true;
            for(int i=0;i<4;i++)
            {
                int nx=x+dx[i], ny=y+dy[i];
                if(isValid(nx,ny,n) && !visited[nx][ny])
                {
                    
                    // cout<<nx<<' '<<ny<<'\t';
                    s.insert({ max(tsf,grid[nx][ny])  ,{nx,ny}});
                } 
            }
                    // cout<<'\n';
        }
        
        // cout<<'\n';
        // for(int i=0;i<n;i++)
        // {
        //     for(int j=0;j<n;j++)
        //         cout<<visited[i][j]<<' ';
        //     cout<<'\n';
        // }
        return -1;        
    }
};