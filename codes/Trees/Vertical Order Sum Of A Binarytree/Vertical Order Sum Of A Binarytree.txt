#include<bits/stdc++.h>
using namespace std;

class TreeNode
{
public:
    int val = 0;
    TreeNode *left = nullptr;
    TreeNode *right = nullptr;

    TreeNode(int val)
    {
        this->val = val;
    }
};

vector<int> verticalOrderSum(TreeNode *root)
{
    queue<pair<TreeNode*,int>> q;
    q.push({root, 0});
    
    unordered_map<int,int> m;
    int min_val=INT_MAX, max_val=INT_MIN;
    while(q.size())
    {
        TreeNode *temp=q.front().first;
        int d=q.front().second;
        q.pop();
        
        m[d]+=temp->val;
        min_val=min(min_val,d);
        max_val=max(max_val,d);
        
        if(temp->left)
            q.push({temp->left,d-1});
        if(temp->right)
            q.push({temp->right,d+1});
    }

    vector<int> res(m.size());
    for(int i=min_val;i<=max_val;i++)
        res[i-min_val]=m[i];
    return res;
}

// input_section=================================================

TreeNode *createTree(vector<int> &arr, vector<int> &IDX)
{

    if (IDX[0] > arr.size() || arr[IDX[0]] == -1)
    {
        IDX[0]++;
        return nullptr;
    }

    TreeNode *node = new TreeNode(arr[IDX[0]++]);
    node->left = createTree(arr, IDX);
    node->right = createTree(arr, IDX);

    return node;
}

void solve()
{
    int n;
    cin >> n;
    vector<int> arr(n, 0);
    for (int i = 0; i < n; i++)
    {
        cin >> arr[i];
    }

    vector<int> IDX(1, 0);
    TreeNode *root = createTree(arr, IDX);

    vector<int> ans = verticalOrderSum(root);
    for (int j : ans)
    {
        cout << j <<'\n';
    }
}

int main()
{
    solve();
    return 0;
}