#include <iostream>
#include <vector>
using namespace std;

class TreeNode
{
public:
  int val = 0;
  TreeNode* left = nullptr;
  TreeNode* right = nullptr;

  TreeNode(int val)
  {
    this->val = val;
  }
};


int height(TreeNode *root, int &diameter)
{
    if(root==NULL)
        return 0;
    int lh=height(root->left, diameter), rh=height(root->right, diameter);
    diameter=max(diameter,lh+rh+1);
    return max(lh,rh)+1;
}

int diameterOfBinaryTree(TreeNode* root)
{
    int diameter=0;
    int h = height(root,diameter);
    return diameter-1;
}

// input_Section=================================================

TreeNode* createTree(vector<int>& arr, vector<int>& IDX)
{
  if (IDX[0] > arr.size() || arr[IDX[0]] == -1)
  {
    IDX[0]++;
    return nullptr;
  }
  TreeNode* node = new TreeNode(arr[IDX[0]++]);
  node->left = createTree(arr, IDX);
  node->right = createTree(arr, IDX);

  return node;
}


void solve()
{
  int n;
  cin >> n;
  vector<int> arr(n, 0);
  for (int i = 0; i < n; i++)
  {
    cin >> arr[i];
  }

  vector<int> IDX(1, 0);
  TreeNode* root = createTree(arr, IDX);
  cout<<diameterOfBinaryTree(root);
}

int main()
{
  solve();
  return 0;
}