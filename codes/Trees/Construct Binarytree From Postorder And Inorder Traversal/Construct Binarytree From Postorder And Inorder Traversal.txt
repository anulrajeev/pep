#include <iostream>
#include <vector>
using namespace std;
typedef vector<int> vi;
class TreeNode
{
public:
    int val = 0;
    TreeNode *left = nullptr;
    TreeNode *right = nullptr;

    TreeNode(int val)
    {
        this->val = val;
    }
};

TreeNode* cTree(vi &post, vi &in, int &postIndex, int is, int ie)
{
    if(is<=ie)
    {
        TreeNode *temp=new TreeNode(post[postIndex--]);
        int index;
        for(int i=is;i<=ie;i++)
            if(in[i]==temp->val)
                { index=i; break;}
                
        temp->right=cTree(post,in,postIndex,index+1,ie);
        temp->left=cTree(post,in,postIndex,is,index-1);
        return temp;
    }
    return NULL;
}

TreeNode *buildTree(vector<int> &inorder, vector<int> &postorder)
{
    int postIndex=postorder.size()-1;
    return cTree(postorder,inorder,postIndex,0,inorder.size()-1);
}

// input_Section_====================================================================

void display(TreeNode *node)
{
    if (node == nullptr)
        return;

    string str = "";
    str += ((node->left != nullptr ? to_string(node->left->val) : "."));
    str += (" -> " + to_string(node->val) + " <- ");
    str += ((node->right != nullptr ? to_string(node->right->val) : "."));

    cout << str << endl;

    display(node->left);
    display(node->right);
}

void solve()
{
    int n;
    cin >> n;
    vector<int> post(n, 0);
    for (int i = 0; i < n; i++)
    {
        cin >> post[i];
    }

    vector<int> in(n, 0);
    for (int i = 0; i < n; i++)
    {
        cin >> in[i];
    }

    TreeNode *root = buildTree(in, post);
    display(root);
}

int main()
{
    solve();
    return 0;
}