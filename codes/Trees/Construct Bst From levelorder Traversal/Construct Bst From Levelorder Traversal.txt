#include <bits/stdc++.h>
#include <vector>
#include <queue>
using namespace std;
typedef pair<int,int> pii;

class TreeNode
{
public:
    int val = 0;
    TreeNode *left = nullptr;
    TreeNode *right = nullptr;

    TreeNode(int val)
    {
        this->val = val;
    }
};

class levelPair
{
public:
    TreeNode *par = nullptr;
    int lb = -(int)1e8;
    int rb = (int)1e8;

    levelPair()
    {
    }

    levelPair(TreeNode *par, int lb, int rb)
    {
        this->par = par;
        this->lb = lb;
        this->rb = rb;
    }
};

TreeNode *constructBSTFromLevelOrder(vector<int> &arr)
{
   queue<pair<TreeNode*,pii>> q;
   TreeNode *root=new TreeNode(arr[0]);
   int index=1;
   q.push({root,{INT_MIN, INT_MAX}});
   while(index<arr.size())
   {
       int ele=arr[index++];
       while(q.size())
       {
            TreeNode *temp=q.front().first;  
            int min_val=q.front().second.first;
            int max_val=q.front().second.second;
            if(min_val<=ele&&ele<=temp->val &&temp->left==NULL)
           {
               temp->left=new TreeNode(ele);
               q.push({temp->left,{min_val,temp->val}});
               break;
           }
           else if(temp->val<=ele && ele<=max_val && temp->right==NULL)
           {
               temp->right=new TreeNode(ele);
               q.push({temp->right,{temp->val,max_val}}); 
               break;
           }
           else
            q.pop();
       }
       
       
   }
   return root;
}

// input_Section_====================================================================

void display(TreeNode *node)
{
    if (node == nullptr)
        return;

    string str = "";
    str += ((node->left != nullptr ? to_string(node->left->val) : "."));
    str += (" -> " + to_string(node->val) + " <- ");
    str += ((node->right != nullptr ? to_string(node->right->val) : "."));

    cout << str << endl;

    display(node->left);
    display(node->right);
}

void solve()
{
    int n;
    cin >> n;
    vector<int> pre(n, 0);
    for (int i = 0; i < n; i++)
    {
        cin >> pre[i];
    }

    TreeNode *root = constructBSTFromLevelOrder(pre);
    display(root);
}

int main()
{
    solve();
    return 0;
}