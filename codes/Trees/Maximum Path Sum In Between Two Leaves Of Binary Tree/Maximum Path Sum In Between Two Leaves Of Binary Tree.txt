#include <iostream>
#include <vector>
using namespace std;

class TreeNode
{
public:
  int val = 0;
  TreeNode* left = nullptr;
  TreeNode* right = nullptr;

  TreeNode(int val)
  {
    this->val = val;
  }
};


int subSum(TreeNode *root, int &res)
{
    if(root==NULL)
        return 0;
    int lsum=subSum(root->left,res), rsum=subSum(root->right,res);
    res=max(res, lsum+rsum+root->val);
    return max(lsum,rsum)+root->val;
}

int maxPathSum(TreeNode* root)
{
    int res=0;
    subSum(root,res);
    return res;
}

// input_Section=================================================

TreeNode* createTree(vector<int>& arr, vector<int>& IDX)
{
  if (IDX[0] > arr.size() || arr[IDX[0]] == -1)
  {
    IDX[0]++;
    return nullptr;
  }
  TreeNode* node = new TreeNode(arr[IDX[0]++]);
  node->left = createTree(arr, IDX);
  node->right = createTree(arr, IDX);

  return node;
}

void solve()
{
  int n;
  cin >> n;
  vector<int> arr(n, 0);
  for (int i = 0; i < n; i++)
  {
    cin >> arr[i];
  }
  int tar;
  cin >> tar;
  vector<int> IDX(1, 0);
  TreeNode* root = createTree(arr, IDX);
  cout << maxPathSum(root) << endl;
}

int main()
{
  solve();
  return 0;
}