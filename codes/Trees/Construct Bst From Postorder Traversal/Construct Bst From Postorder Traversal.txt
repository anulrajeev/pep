#include <bits/stdc++.h>
#include <vector>
using namespace std;

class TreeNode
{
public:
    int val = 0;
    TreeNode *left = nullptr;
    TreeNode *right = nullptr;

    TreeNode(int val)
    {
        this->val = val;
    }
};

TreeNode* cTree(vector<int> &post, int &postIndex, int min_val, int max_val)
{
    if(postIndex<0)
        return NULL;
    else if(min_val<=post[postIndex]&&post[postIndex]<=max_val)
    {
        TreeNode *temp=new TreeNode(post[postIndex--]);
        temp->right=cTree(post,postIndex,temp->val,max_val);
        temp->left=cTree(post,postIndex,min_val,temp->val);
        return temp;
    }
    else
        return NULL;
}

TreeNode *bstFromPostorder(vector<int> &postorder)
{
    int postIndex=postorder.size()-1;
    return cTree(postorder,postIndex,INT_MIN,INT_MAX);
    
}

// input_Section_====================================================================

void display(TreeNode *node)
{
    if (node == nullptr)
        return;

    string str = "";
    str += ((node->left != nullptr ? to_string(node->left->val) : "."));
    str += (" -> " + to_string(node->val) + " <- ");
    str += ((node->right != nullptr ? to_string(node->right->val) : "."));

    cout << str << endl;

    display(node->left);
    display(node->right);
}

void solve()
{
    int n;
    cin >> n;
    vector<int> pre(n, 0);
    for (int i = 0; i < n; i++)
    {
        cin >> pre[i];
    }

    TreeNode *root = bstFromPostorder(pre);
    display(root);
}

int main()
{
    solve();
    return 0;
}