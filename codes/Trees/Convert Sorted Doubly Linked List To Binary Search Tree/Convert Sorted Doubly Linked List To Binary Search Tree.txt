#include <iostream>
#include <vector>
using namespace std;

class Node
{
public:
    int val = 0;
    Node *left = nullptr;
    Node *right = nullptr;

    Node(int val)
    {
        this->val = val;
    }
};

Node *getMid(Node *head)
{
    if(head==NULL || (head->left==NULL && head->right==NULL))
        return head;
        
    Node *slow=head, *fast=head;
    while(fast->right && fast->right->right)
    {
        slow=slow->right;
        fast=fast->right->right;
    }
    return slow;
}

Node *SortedDLLToBST(Node* head)
{
    if(head==NULL || (head->left==NULL && head->right==NULL))
        return head;
        
    Node *mid = getMid(head);
    Node *prev=mid->left, *next=mid->right;
    mid->right=mid->left=next->left=NULL;
    if(prev)
        prev->right=NULL;
    
    Node *leftHead =(prev?head:NULL);
    Node *rightHead=next;
    Node *root  = mid;
    
    
    mid->left =SortedDLLToBST(leftHead);
    mid->right=SortedDLLToBST(rightHead);
    return root;
    
}

// input_Section_====================================================================

void display(Node *node)
{
    if (node == nullptr)
        return;

    string str = "";
    str += ((node->left != nullptr ? to_string(node->left->val) : "."));
    str += (" -> " + to_string(node->val) + " <- ");
    str += ((node->right != nullptr ? to_string(node->right->val) : "."));

    cout << str << endl;

    display(node->left);
    display(node->right);
}

Node* makeList(int n) {
        Node* dummy = new Node(-1);
        Node* prev = dummy;
        while (n-- > 0) {
            int val; cin >> val;
            Node* node = new Node(val);
            prev->right = node;
            node->left = prev;
            prev = prev->right;
        }

        Node *head = dummy->right;
        head->left = dummy->right = nullptr;

        return head;
    }

void solve()
{
    int n;
    cin >> n;
    Node* head = makeList(n);
    
    head = SortedDLLToBST(head);
    display(head);
}

int main()
{
    solve();
    return 0;
}