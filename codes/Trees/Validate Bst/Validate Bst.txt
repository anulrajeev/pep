#include <bits/stdc++.h>
#include <vector>
using namespace std;

class TreeNode
{
public:
    int val = 0;
    TreeNode *left = nullptr;
    TreeNode *right = nullptr;

    TreeNode(int val)
    {
        this->val = val;
    }
};

bool isBST(TreeNode *root, int min_val, int max_val)
{
    if(root==NULL)
        return true;
    return (min_val<root->val && root->val<max_val && 
            isBST(root->left,min_val,root->val)    && 
            isBST(root->right,root->val,max_val));
}

bool isValidBST(TreeNode *root)
{
   return isBST(root,INT_MIN,INT_MAX);
}

TreeNode *createTree(vector<int> &arr, vector<int> &IDX)
{
    if (IDX[0] > arr.size() || arr[IDX[0]] == -1){
            IDX[0]++;
            return nullptr;
        }

    TreeNode *node = new TreeNode(arr[IDX[0]++]);
    node->left = createTree(arr, IDX);
    node->right = createTree(arr, IDX);

    return node;
}

void solve()
{
    int n;
    cin >> n;
    vector<int> arr(n, 0);
    for (int i = 0; i < n; i++)
    {
        cin >> arr[i];
    }

    vector<int> IDX(1, 0);
    TreeNode *root = createTree(arr, IDX);
    cout << (boolalpha) << isValidBST(root);
}

int main()
{
    solve();
    return 0;
}