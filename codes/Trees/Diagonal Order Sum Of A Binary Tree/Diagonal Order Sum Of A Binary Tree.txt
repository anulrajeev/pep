#include <iostream>
#include <vector>
#include <queue>
using namespace std;

class TreeNode
{
public:
    int val = 0;
    TreeNode *left = nullptr;
    TreeNode *right = nullptr;

    TreeNode(int val)
    {
        this->val = val;
    }
};

vector<int> diagonalOrderSum(TreeNode *root)
{
    vector<int> res;
    queue<TreeNode*> q;
    q.push(root);
    while(q.size())
    {
        int size=q.size();
        int sum=0;
        for(int i=0;i<size;i++)
        {
            TreeNode *temp=q.front(); q.pop();
            sum+=temp->val;
            if(temp->left)
                q.push(temp->left);
            while(temp->right)
            {
                temp=temp->right;
                sum+=temp->val;
                if(temp->left)
                    q.push(temp->left);
            }
        }
        res.push_back(sum);
    }
    return res;
}

// input_section=================================================

TreeNode *createTree(vector<int> &arr, vector<int> &IDX)
{

    if (IDX[0] > arr.size() || arr[IDX[0]] == -1)
    {
        IDX[0]++;
        return nullptr;
    }

    TreeNode *node = new TreeNode(arr[IDX[0]++]);
    node->left = createTree(arr, IDX);
    node->right = createTree(arr, IDX);

    return node;
}

void solve()
{
    int n;
    cin >> n;
    vector<int> arr(n, 0);
    for (int i = 0; i < n; i++)
    {
        cin >> arr[i];
    }

    vector<int> IDX(1, 0);
    TreeNode *root = createTree(arr, IDX);

    vector<int> ans = diagonalOrderSum(root);
    for(auto x : ans)
        cout<<x<<' ';
   
}

int main()
{
    solve();
    return 0;
}