#include <iostream>
#include <vector>
using namespace std;
typedef vector<int> vi;

class TreeNode
{
public:
    int val = 0;
    TreeNode *left = nullptr;
    TreeNode *right = nullptr;

    TreeNode(int val)
    {
        this->val = val;
    }
};

TreeNode *cTree(vi &pre, int pre_start, int pre_end, vi &post, int post_start, int post_end)
{
    if(pre_start<pre_end)
    {
        TreeNode *temp = new TreeNode(pre[pre_start]);
        int index=post_start;
        while(post[index]!=pre[pre_start+1])
            index++;
        
        int count = index-post_start+1;
        
        temp->left = cTree(pre,pre_start+1,pre_start+count, post,post_start,index);
        temp->right= cTree(pre,pre_start+count+1,pre_end,post,index+1,post_end);
        return temp;
    }
    else if(pre_start==pre_end)
        return new TreeNode(pre[pre_start]);
    else
        return NULL;
}


TreeNode *constructFromPrePost(vector<int> &pre, vector<int> &post)
{
    return cTree(pre,0,pre.size()-1,post,0,post.size()-1);
}

// input_Section_====================================================================

void display(TreeNode *node)
{
    if (node == nullptr)
        return;

    string str = "";
    str += ((node->left != nullptr ? to_string(node->left->val) : "."));
    str += (" -> " + to_string(node->val) + " <- ");
    str += ((node->right != nullptr ? to_string(node->right->val) : "."));

    cout << str << endl;

    display(node->left);
    display(node->right);
}

void solve()
{
    int n;
    cin >> n;
    vector<int> post(n, 0);
    for (int i = 0; i < n; i++)
    {
        cin >> post[i];
    }

    vector<int> pre(n, 0);
    for (int i = 0; i < n; i++)
    {
        cin >> pre[i];
    }

    TreeNode *root = constructFromPrePost(pre, post);
    display(root);
}

int main()
{
    solve();
    return 0;
}