#include<bits/stdc++.h>
using namespace std;

class TreeNode
{
public:
  int val = 0;
  TreeNode* left = nullptr;
  TreeNode* right = nullptr;

  TreeNode(int val)
  {
    this->val = val;
  }
};

vector<TreeNode*> nodeToRootPath(TreeNode *root, int target)
{
    stack<pair<TreeNode*,int>> st;
    st.push({root,0});
    while(st.size())
    {
        TreeNode *temp=st.top().first;
        int &state=st.top().second;
        
        if(temp->val==target)
            break;
        if(state==0)
        {
            state++;
            if(temp->left)
                st.push({temp->left,0});
        }
        else if(state==1)
        {
            state++;
            if(temp->right)
                st.push({temp->right,0});
        }
        else
            st.pop();
    }
    
    vector<TreeNode*> res;
    while(st.size())
        {
            res.push_back(st.top().first);
            st.pop();
        }
    return res;
}

void burnTree(TreeNode *root, int &depth, TreeNode *prev, int level=0)
{
    if(root==NULL)
        return;
    depth=max(depth,level);
    if(root->left!=prev)
        burnTree(root->left, depth,root,level+1);
    if(root->right!=prev)
        burnTree(root->right,depth,root,level+1);
}

int burningTree(TreeNode* root, int fireNode)
{
    vector<TreeNode*> v= nodeToRootPath(root,fireNode);
    int time_=0;
    for(int i=0;i<v.size();i++)
    {
        int depth=0;
        burnTree(v[i],depth,(i>0?v[i-1]:NULL));
        time_=max(time_,depth+i);
    }
    return time_;
}

// input_section=================================================

TreeNode* createTree(vector<int>& arr, vector<int>& IDX)
{

  if (IDX[0] > arr.size() || arr[IDX[0]] == -1)
  {
    IDX[0]++;
    return nullptr;
  }

  TreeNode* node = new TreeNode(arr[IDX[0]++]);
  node->left = createTree(arr, IDX);
  node->right = createTree(arr, IDX);

  return node;
}

void solve()
{
  int n;
  cin >> n;
  vector<int> arr(n, 0);
  for (int i = 0; i < n; i++)
  {
    cin >> arr[i];
  }

  vector<int> IDX(1, 0);
  TreeNode* root = createTree(arr, IDX);

  int fireNode;
  cin >> fireNode;
  int ans = burningTree(root, fireNode);
  cout << ans << endl;
}

int main()
{
  solve();
  return 0;
}