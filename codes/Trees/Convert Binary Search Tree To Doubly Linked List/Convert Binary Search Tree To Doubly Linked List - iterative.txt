#include<bits/stdc++.h>
using namespace std;

class Node
{
public:
  int val = 0;
  Node* left = nullptr;
  Node* right = nullptr;

  Node(int val)
  {
    this->val = val;
  }
};


void inOrder(Node *root, Node* &prev, Node* &head)
{
    if(root==NULL)
        return;
    inOrder(root->left,prev,head);
    if(prev==NULL)
        head=root;
    else
    {
        root->left=prev;
        prev->right=root;
    }
    prev=root;
    inOrder(root->right,prev,head);
}
Node* bToDLL(Node* root)
{
    Node *prev=NULL, *head=NULL, *tail;
    stack<pair<Node*,int>> st;
    st.push({root,0});
    while(st.size())
    {
        Node *temp=st.top().first;
        int &state=st.top().second;
        if(state==0)
        {
            state++;
            if(temp->left)
                st.push({temp->left,0});
        }
        else if(state==1)
        {
            state++;
            tail=temp;
            if(prev==NULL)
                head=temp;
            else
            {
                prev->right=temp;
                temp->left =prev;
            }
            prev=temp;
            if(temp->right)
                st.push({temp->right,0});
        }
        else
            st.pop();
    }
    
    head->left=tail;
    tail->right=head;
    return head;
}

// input_Section_====================================================================

void display(Node* node)
{
  Node* head = node;
  while (node != nullptr) {
    cout << node->val << " ";
    node = node->right;
    if (node == head)
      break;
  }
}

Node* constructFromInOrder(vector<int>& inOrder, int si, int ei)
{
  if (si > ei)
    return nullptr;
  int mid = (si + ei) / 2;
  Node* root = new Node(inOrder[mid]);

  root->left = constructFromInOrder(inOrder, si, mid - 1);
  root->right = constructFromInOrder(inOrder, mid + 1, ei);

  return root;
}

Node* constructFromInOrder(vector<int>& inOrder)
{
  return constructFromInOrder(inOrder, 0, inOrder.size() - 1);
}

void solve()
{
  int n;
  cin >> n;
  vector<int> in(n, 0);
  for (int i = 0; i < n; i++)
  {
    cin >> in[i];
  }

  Node* root = constructFromInOrder(in);
  Node* head = bToDLL(root);
  display(head);
}

int main()
{
  solve();
  return 0;
}