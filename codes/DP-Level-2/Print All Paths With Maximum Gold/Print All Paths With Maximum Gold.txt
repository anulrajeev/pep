#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef unsigned long long ull;
typedef vector<int> vi;
typedef vector<vi> vvi;
typedef vector<ll> vll;
typedef vector<vll> vvll;
typedef vector<bool> vb;
typedef vector<vb> vvb;
typedef vector<string> vs;
typedef vector<char> vc;
typedef vector<vc> vvc;
typedef pair<int, int> pii;

ll mod = 1000000009;

void _main();
int main(){

	_main();
	return 0;
}

struct Path
{
	string asf;
	int i,j;
};


void maxGold(vvi &maze)
{
	int  m=maze.size(), n=maze[0].size();
	int dp[m][n];
	for(int i=0;i<m;i++)
		dp[i][n-1]=maze[i][n-1];
	for(int j=n-2;j>=0;j--)
		for(int i=m-1;i>=0;i--)
		{
			int a=(i-1>=0?dp[i-1][j+1]:0);
			int b = dp[i][j+1];
			int c=(i+1<m?dp[i+1][j+1]:0);
			dp[i][j]=max({a,b,c})+maze[i][j];

		}

	
	int max_gold=0,r,c;
	for(int i=0;i<m;i++)
		{
			if(max_gold<= dp[i][0])
			{
				max_gold=dp[i][0];
				r=i, c=0;
			}
		}

	cout<<max_gold<<'
';
	// cout<<r<<' ';

	queue<Path> q;
	q.push({"", r,c});
	while(q.size())
	{
		string s=q.front().asf;
		int i=q.front().i, j=q.front().j;
		q.pop();

		if(j==n-1)
			cout<<r<<' '<<s<<'
';
		else
		{
			int a=(i-1>=0?dp[i-1][j+1]:INT_MIN);
			int b = dp[i][j+1];
			int c=(i+1<m?dp[i+1][j+1]:INT_MIN);
			int max_ele=max({a,b,c});
			if(a==max_ele)
				q.push({s+"d1 ", i-1,j+1});
			if(b==max_ele)
				q.push({s+"d2 ", i,j+1});
			if(c==max_ele)
				q.push({s+"d3 ", i+1,j+1});
		}
				
	}
	



}


void _main()
{
  	int m,n;
  	cin>>m>>n;
  	vvi maze(m, vi(n));
  	for(int i=0;i<m;i++)
  		for(int j=0;j<n;j++)
  			cin>>maze[i][j];
  	maxGold(maze);
}