#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef unsigned long long ull;
typedef vector<int> vi;
typedef vector<vi> vvi;
typedef vector<ll> vll;
typedef vector<vll> vvll;
typedef vector<bool> vb;
typedef vector<vb> vvb;
typedef vector<string> vs;
typedef vector<char> vc;
typedef vector<vc> vvc;
typedef pair<int, int> pii;

ll mod = 1000000007;

void _main();
int main(){
 #ifndef ONLINE_JUDGE
    // for getting input from input.txt
    freopen("input.txt", "r", stdin);
    // for writing output to output.txt
    freopen("output.txt", "w", stdout);
 #endif
	_main();
	return 0;
}

int maxSum(int A[], int n, int x, int y)
{
	int sum=0;
	int left[n]={0}, right[n]={0};

/*

	left[i] --> max sum subarray of length x upto A[i];
	right[i]--> max sum subarray of length y from A[i] till end;

	ans  = max [ max sum subarray of length x<=ith index + max sum subarray of length y>ith index ] for all i
	
*/
	for(int i=0;i<n;i++)
		if(i<x-1)
			sum+=A[i];
		else if(i==x-1)
		{
			sum+=A[i];
			left[i]=sum;
		}
		else
		{
			sum=sum+A[i]-A[i-x];
			left[i]=max(left[i-1],sum);
		}

	sum=0;
	for(int j=n-1;j>=0;j--)
		if(j>n-y)
			sum+=A[j];
		else if(j==n-y)
		{
			sum+=A[j];
			right[j]=sum;
		}
		else
		{
			sum=sum+A[j]-A[j+y];
			right[j]=max(right[j+1],sum);
		}
/*
	for(int i=0;i<n;i++)
		cout<<left[i]<<' ';	cout<<'\n';
	for(int i=0;i<n;i++)
		cout<<right[i]<<' ';	cout<<'\n';
*/

	int res=0;
	for(int k = x-1; k<n-y; k++)
		res=max(res, left[k]+right[k+1]);
	return res;
}


int solution(int A[], int n, int x, int y)
{
	return max(maxSum(A,n,x,y),maxSum(A,n,y,x));
}

void _main()
{
  	int n;
  	cin>>n;
  	int A[n];
  	for(int i=0;i<n;i++)
  		cin>>A[i];
  	int x,y;
  	cin>>x>>y;
  	cout<<solution(A,n,x,y);

}

