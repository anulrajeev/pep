#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef unsigned long long ull;
typedef vector<int> vi;
typedef vector<vi> vvi;
typedef vector<ll> vll;
typedef vector<vll> vvll;
typedef vector<bool> vb;
typedef vector<vb> vvb;
typedef vector<string> vs;
typedef vector<char> vc;
typedef vector<vc> vvc;
typedef pair<int, int> pii;

ll mod = 1000000009;

void _main();
int main(){
	_main();
	return 0;
}

void iterativeDFS(vi adj[], int V, int src)
{
	stack<pii> st;
	bool visited[V]={false};
	st.push({src,adj[src].size()-1});
	visited[src]=true;
	vs psf(V);
	psf[src]=to_string(src);
	cout<<st.top().first<<'@'<<psf[src]<<'
';
	
	while(st.size())
	{
		int u=st.top().first, &state=st.top().second;
		if(state<0)
			st.pop();
		else
		{
			int v=adj[u][state];
			state--;
			if(visited[v]==false)
			{
				st.push({v,adj[v].size()-1});
				visited[v]=true;
				psf[v]=psf[u]+to_string(v);
				cout<<v<<'@'<<psf[v]<<'
';
			}
		}
	}
	
}

void _main()
{
  	int V,k;
  	cin>>V>>k;
  	vi adj[V];
  	int u,v,wt;
  	for(int i=0;i<k;i++)
  	{
  		cin>>u>>v>>wt;
  		adj[u].push_back(v);
  		adj[v].push_back(u);
  	}
  	int src;
  	cin>>src;
  	iterativeDFS(adj,V,src);
}