#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef unsigned long long ull;
typedef vector<int> vi;
typedef vector<vi> vvi;
typedef vector<ll> vll;
typedef vector<vll> vvll;
typedef vector<bool> vb;
typedef vector<vb> vvb;
typedef vector<string> vs;
typedef vector<char> vc;
typedef vector<vc> vvc;
typedef pair<int, int> pii;

ll mod = 1000000009;

void _main();
int main(){
	_main();
	return 0;
}

void dijkstra(vector<pair<int,int>> adj[], int V, int source)
{
	set<pair<int,int>> s;
	vi dist(V, INT_MAX);
	vs psf(V);
	s.insert({0,source});
	dist[source]=0;
	psf[source]=to_string(source);
	while(s.size())
	{
		auto p=*s.begin(); s.erase(s.begin());
		int d=p.first, u=p.second;
		cout<<u<<" via "<<psf[u]<<" @ "<<d<<'
';
		for(auto p : adj[u])
		{
			int v=p.first, wt=p.second;
			if(dist[v]>dist[u]+wt)
			{
				s.erase({dist[v],v});
				dist[v]=dist[u]+wt;
				s.insert({dist[v],v});
				psf[v]=psf[u]+to_string(v);
			}
		}
	}
}

void primsAlgo(vector<pair<int,int>> adj[], int V)
{
	bool included[V]={false};
	vi dist(V, INT_MAX);
	vector<pii> closest(V);
	dist[0]=0;
	int sum=0;
	for(int i=0;i<V;i++)
	{
		int u=-1;
		for(int j=0;j<V;j++)
			if(included[j]==false && (u==-1 || dist[u]>dist[j]))
				u=j;
		if(i==1)
			closest[u]={0,dist[u]};
		if(i!=0)
		cout<<'['<<u<<'-'<<closest[u].first<<'@'<<closest[u].second<<']'<<'
';
		sum+=dist[u];
		included[u]=true;
		for(auto p : adj[u])
		{
			int v=p.first, wt=p.second;
			if(included[v]==false && dist[v]>dist[u]+wt)
				dist[v]=wt, closest[v]={u,wt};
		}
	}
}

void _main()
{
  	int V,k;
  	cin>>V>>k;
  	vector<pair<int,int>> adj[V];
  	int u,v,wt;
  	for(int i=0;i<k;i++)
  	{
  		cin>>u>>v>>wt;
  		adj[u].push_back({v,wt});
  		adj[v].push_back({u,wt});
  	}
  	primsAlgo(adj,V);
}