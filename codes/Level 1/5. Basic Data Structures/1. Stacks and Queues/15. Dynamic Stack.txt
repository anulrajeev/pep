#include <iostream>
#include <exception>
using namespace std;

class Stack {

public:
  int* arr;
  int tos;
  int MaxCapacity;

public:
  Stack(int size) {
    this->MaxCapacity = size;
    this->arr = new int[this->MaxCapacity];
    this->tos = -1;
  }


public:
  Stack() {
    Stack(10);
  }

public:
  int size() {
    return tos+1;
  }

public:
  void push(int data) {
    
    if(tos+1<MaxCapacity)
        arr[++tos]=data;
    else
        {
            int *new_arr=new int[MaxCapacity*2];
            for(int i=0;i<MaxCapacity;i++)
                new_arr[i]=arr[i];
            new_arr[MaxCapacity]=data;
            tos=MaxCapacity;
            MaxCapacity*=2;
            delete arr;
            arr=new_arr;
            
        }
    
  }

public:
  int top()
  {
    if(tos!=-1)
        return arr[tos];
    else
        cout<<"Stack underflow
";
    return -1;
        
  }

public:
  int pop()
  {
     if(tos!=-1)
        return arr[tos--];
    else
        cout<<"Stack underflow
";
    return -1;
  }

public:
  void display() {
    for(int i=tos;i>=0;i--)
        cout<<arr[i]<<' ';
    cout<<'
';
  }
};

int main() {
  int n;
  cin >> n;
  Stack st(n);
  string str;
  cin >> str;

  while (str != "quit") {
    if (str == "push") {
      int val;
      cin >> val;
      st.push(val);
    } else if (str == "pop") {
      int val = st.pop();
      if (val != -1) {
        cout << val << endl;
      }
    } else if (str == "top") {
      int val = st.top();
      if (val != -1) {
        cout << val << endl;
      }

    } else if (str == "size") {
      cout << st.size() << endl;
    } else if (str == "display") {
      st.display();
    }
    cin >> str;
  }
}