#include <bits/stdc++.h>
using namespace std;
typedef vector<int> vi;
struct Node
{
	int data;
	vector<Node *> children;
	Node (int x)
	{
		data = x;
	}
};
Node* cTree(vi v)
{
	stack<Node*> st;
	Node *root=new Node(v[0]);
	st.push(root);
	for(int i=1;i<v.size();i++)
	{
		if(v[i]==-1)
			st.pop();
		else
		{
			Node *temp = new Node(v[i]);
			(st.top()->children).push_back(temp);
			st.push(temp);
		}
	}
	return root;
}
void display2(Node *root)
{
	if(root==NULL)
		return;
	cout<<root->data<<" -> ";
	for(int i=0;i<root->children.size();i++)
			cout<<root->children[i]->data<<", ";
	cout<<".
";
	for(auto child : root->children)
		display2(child);
}

Node* linearise(Node *root)
{
	if(root==NULL || root->children.size()==0)
		return root;
	vector<Node *> &v = root->children;
	Node *temp=v[v.size()-1];
	v.erase(v.begin()+v.size()-1);
	Node *lt=linearise(temp);
	while(v.size())
	{
		Node *slt=linearise(v[v.size()-1]);
		slt->children.push_back(temp);
		temp=v[v.size()-1];
		v.erase(v.begin()+v.size()-1);
	}
	root->children.push_back(temp);
	return lt;
}

int main()
{
	int n;
	cin>>n;
 	vi v(n); 	
 	for(int i=0;i<n;i++)
 		cin>>v[i];
 	Node *root = cTree(v);
    Node *temp = linearise(root); display2(root);
    return 0;
}